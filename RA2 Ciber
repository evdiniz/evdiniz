{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/evdiniz/evdiniz/blob/main/RA2%20Ciber\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E1uD0swAd3iI",
        "outputId": "5e83a741-a121-485e-81dd-2021a30defac"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Garçom 0 fez o pedido 0\n",
            "Cozinheiro 1 preparando o pedido 0 do garçom 0\n",
            "Garçom 1 fez o pedido 0\n",
            "Cozinheiro 2 preparando o pedido 0 do garçom 1\n",
            "Garçom 2 fez o pedido 0\n",
            "Garçom 0 fez o pedido 1\n",
            "Garçom 1 fez o pedido 1\n",
            "Garçom 2 fez o pedido 1\n",
            "Cozinheiro 2 terminou o pedido 0 do garçom 1\n",
            "Cozinheiro 2 preparando o pedido 0 do garçom 2\n",
            "Garçom 0 fez o pedido 2\n",
            "Cozinheiro 1 terminou o pedido 0 do garçom 0\n",
            "Cozinheiro 1 preparando o pedido 1 do garçom 0\n",
            "Garçom 2 fez o pedido 2\n",
            "Cozinheiro 1 terminou o pedido 1 do garçom 0\n",
            "Cozinheiro 1 preparando o pedido 1 do garçom 1\n",
            "Garçom 2 fez o pedido 3\n",
            "Cozinheiro 2 terminou o pedido 0 do garçom 2\n",
            "Cozinheiro 2 preparando o pedido 1 do garçom 2\n",
            "Garçom 1 fez o pedido 2\n",
            "Cozinheiro 1 terminou o pedido 1 do garçom 1\n",
            "Cozinheiro 1 preparando o pedido 2 do garçom 0\n",
            "Garçom 0 fez o pedido 3\n",
            "Cozinheiro 2 terminou o pedido 1 do garçom 2\n",
            "Cozinheiro 2 preparando o pedido 2 do garçom 2\n",
            "Garçom 2 fez o pedido 4\n",
            "Cozinheiro 1 terminou o pedido 2 do garçom 0\n",
            "Cozinheiro 1 preparando o pedido 3 do garçom 2\n",
            "Garçom 0 fez o pedido 4\n",
            "Cozinheiro 2 terminou o pedido 2 do garçom 2\n",
            "Cozinheiro 2 preparando o pedido 2 do garçom 1\n",
            "Garçom 2 fez o pedido 5\n",
            "Cozinheiro 1 terminou o pedido 3 do garçom 2\n",
            "Cozinheiro 1 preparando o pedido 3 do garçom 0\n",
            "Garçom 1 fez o pedido 3\n",
            "Cozinheiro 2 terminou o pedido 2 do garçom 1\n",
            "Cozinheiro 2 preparando o pedido 4 do garçom 2\n",
            "Garçom 0 fez o pedido 5\n",
            "Cozinheiro 1 terminou o pedido 3 do garçom 0\n",
            "Cozinheiro 1 preparando o pedido 4 do garçom 0\n",
            "Garçom 1 fez o pedido 4\n",
            "Cozinheiro 2 terminou o pedido 4 do garçom 2\n",
            "Cozinheiro 2 preparando o pedido 5 do garçom 2\n",
            "Garçom 2 fez o pedido 6\n",
            "Cozinheiro 1 terminou o pedido 4 do garçom 0\n",
            "Cozinheiro 1 preparando o pedido 3 do garçom 1\n",
            "Garçom 0 fez o pedido 6\n",
            "Cozinheiro 2 terminou o pedido 5 do garçom 2\n",
            "Cozinheiro 2 preparando o pedido 5 do garçom 0\n",
            "Garçom 2 fez o pedido 7\n",
            "Cozinheiro 1 terminou o pedido 3 do garçom 1\n",
            "Cozinheiro 1 preparando o pedido 4 do garçom 1\n",
            "Garçom 1 fez o pedido 5\n",
            "Cozinheiro 2 terminou o pedido 5 do garçom 0\n",
            "Cozinheiro 2 preparando o pedido 6 do garçom 2\n",
            "Garçom 2 fez o pedido 8\n",
            "Cozinheiro 1 terminou o pedido 4 do garçom 1\n",
            "Cozinheiro 1 preparando o pedido 6 do garçom 0\n",
            "Garçom 1 fez o pedido 6\n",
            "Cozinheiro 2 terminou o pedido 6 do garçom 2\n",
            "Cozinheiro 2 preparando o pedido 7 do garçom 2\n",
            "Garçom 2 fez o pedido 9\n",
            "Cozinheiro 1 terminou o pedido 6 do garçom 0\n",
            "Cozinheiro 1 preparando o pedido 5 do garçom 1\n",
            "Garçom 0 fez o pedido 7\n",
            "Cozinheiro 2 terminou o pedido 7 do garçom 2\n",
            "Cozinheiro 2 preparando o pedido 8 do garçom 2\n",
            "Garçom 1 fez o pedido 7\n",
            "Cozinheiro 1 terminou o pedido 5 do garçom 1\n",
            "Cozinheiro 1 preparando o pedido 6 do garçom 1\n",
            "Garçom 0 fez o pedido 8\n",
            "Cozinheiro 2 terminou o pedido 8 do garçom 2\n",
            "Cozinheiro 2 preparando o pedido 9 do garçom 2\n",
            "Garçom 1 fez o pedido 8\n",
            "Cozinheiro 2 terminou o pedido 9 do garçom 2\n",
            "Cozinheiro 2 preparando o pedido 7 do garçom 0\n",
            "Garçom 1 fez o pedido 9\n",
            "Cozinheiro 1 terminou o pedido 6 do garçom 1\n",
            "Cozinheiro 1 preparando o pedido 7 do garçom 1\n",
            "Garçom 0 fez o pedido 9\n",
            "Tempo total de atendimento: 9.620861530303955 segundos\n"
          ]
        }
      ],
      "source": [
        "import threading\n",
        "import time\n",
        "import random\n",
        "\n",
        "# Lista de pedidos pendentes\n",
        "pedidos_pendentes = []\n",
        "condition = threading.Condition()\n",
        "\n",
        "# Função para os garçons fazerem pedidos\n",
        "def garcom_func(id_garcom, max_pedidos=10):\n",
        "    for i in range(max_pedidos):\n",
        "        time.sleep(random.uniform(0.1, 0.5))  # Simula o tempo para fazer um pedido\n",
        "        fazer_pedido(id_garcom, i)\n",
        "\n",
        "# Função para fazer um pedido\n",
        "def fazer_pedido(id_garcom, pedido):\n",
        "    with condition:\n",
        "        while len(pedidos_pendentes) >= 4:\n",
        "            condition.wait()  # Espera até que haja espaço\n",
        "        pedidos_pendentes.append((id_garcom, pedido))\n",
        "        print(f\"Garçom {id_garcom} fez o pedido {pedido}\")\n",
        "        condition.notify_all()\n",
        "\n",
        "# Função para os cozinheiros prepararem pedidos\n",
        "def cozinheiro_func(id_cozinheiro):\n",
        "    while True:\n",
        "        with condition:\n",
        "            while not pedidos_pendentes:\n",
        "                condition.wait()  # Espera até que haja pedidos\n",
        "            id_garcom, pedido = pedidos_pendentes.pop(0)\n",
        "            print(f\"Cozinheiro {id_cozinheiro} preparando o pedido {pedido} do garçom {id_garcom}\")\n",
        "            condition.notify_all()\n",
        "        time.sleep(random.uniform(0.5, 1.0))  # Simula o tempo para preparar o pedido\n",
        "        print(f\"Cozinheiro {id_cozinheiro} terminou o pedido {pedido} do garçom {id_garcom}\")\n",
        "\n",
        "# Função principal\n",
        "def main():\n",
        "    # Criação das threads dos garçons\n",
        "    garcons = [threading.Thread(target=garcom_func, args=(i, 10)) for i in range(3)]  # 3 garçons\n",
        "    cozinheiro1 = threading.Thread(target=cozinheiro_func, args=(1,))\n",
        "    cozinheiro2 = threading.Thread(target=cozinheiro_func, args=(2,))\n",
        "\n",
        "    # Medição do tempo de atendimento\n",
        "    start_time = time.time()\n",
        "\n",
        "    # Iniciar threads\n",
        "    for garcom in garcons:\n",
        "        garcom.start()\n",
        "    cozinheiro1.start()\n",
        "    cozinheiro2.start()\n",
        "\n",
        "    # Aguardar término dos garçons\n",
        "    for garcom in garcons:\n",
        "        garcom.join()\n",
        "\n",
        "    # Fechar a cozinha\n",
        "    with condition:\n",
        "        condition.notify_all()  # Desperta o cozinheiro para que ele termine\n",
        "\n",
        "    end_time = time.time()\n",
        "    print(f\"Tempo total de atendimento: {end_time - start_time} segundos\")\n",
        "\n",
        "# Executar função principal\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPdVGDU0JmHheAAD5sbhh4J",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}